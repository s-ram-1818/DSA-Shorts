# ðŸ“Œ Heaps â€“ Interview Notes

## 1. Basics
- **Heap**: A complete binary tree that satisfies the **heap property**.  
- Types:
  - **Max-Heap** â†’ parent â‰¥ children  
  - **Min-Heap** â†’ parent â‰¤ children  
- Stored as an **array**:
  - `arr[0]` = root
  - For index `i`:
    - `left = 2*i + 1`
    - `right = 2*i + 2`
    - `parent = (i-1)/2`

---

## 2. Operations
### Heapify
- Converts subtree rooted at index `i` into a heap.  
- Time: **O(log n)**

### Build Heap
- Convert an array into a heap.  
- Time: **O(n)**

### Insert (push)
1. Insert at last position.
2. Bubble up until property holds.  
- Time: **O(log n)**

### Delete / Extract (pop)
1. Swap root with last element.
2. Remove last element.
3. Heapify from root.  
- Time: **O(log n)**

### Peek
- Return root (min or max).  
- Time: **O(1)**

---

## 3. Applications
- **Heap Sort** â†’ O(n log n)
- **Priority Queue** (job scheduling, CPU scheduling, Dijkstraâ€™s, Primâ€™s)
- **Median in a stream** â†’ 2 heaps (max-heap + min-heap)
- **Kth smallest/largest element**
- **Merge K sorted arrays/lists**
- **Top-K frequent elements**
- **Interval problems** (meeting rooms, CPU load)

---

## 4. Complexities
| Operation  | Time     |
|------------|----------|
| Insert     | O(log n) |
| Delete     | O(log n) |
| Peek       | O(1)     |
| Build Heap | O(n)     |
| Heap Sort  | O(n log n) |

---

## 5. C++ Custom Comparator
```cpp
// Min-heap
priority_queue<int, vector<int>, greater<int>> minHeap;

// Max-heap (default)
priority_queue<int> maxHeap;

// Custom comparator
struct cmp {
    bool operator()(pair<int,int> &a, pair<int,int> &b) {
        return a.second > b.second; // min-heap by .second
    }
};
priority_queue<pair<int,int>, vector<pair<int,int>>, cmp> pq;
