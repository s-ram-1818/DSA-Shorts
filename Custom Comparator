#include <bits/stdc++.h>
using namespace std;

// 1️⃣ Custom comparator function (outside class)
// Simple free function, can be passed directly
bool cmpFunction(pair<char,int> a, pair<char,int> b) {
    return a.second > b.second;
}

// 2️⃣ Functor (struct with operator())
// Acts like a function object
struct CmpFunctor {
    bool operator()(const pair<char,int> &a, const pair<char,int> &b) const {
        return a.second > b.second;
    }
};

// 3️⃣ Class with static comparator
struct Student {
    string name;
    int marks;

    // Static: no 'this' pointer, can be passed to sort directly
    static bool cmpByMarks(const Student &a, const Student &b) {
        if (a.marks == b.marks) return a.name < b.name; // secondary sort by name
        return a.marks > b.marks;
    }

    // Non-static: has hidden 'this' pointer, needs an object — won't compile in sort
    bool cmpByMarksNonStatic(const Student &a, const Student &b) {
        return a.marks > b.marks;
    }
};

int main() {
    // ---------- Inbuilt comparator ----------
    vector<int> nums = {4, 1, 3, 2};
    sort(nums.begin(), nums.end());                 // ascending (default)
    sort(nums.begin(), nums.end(), greater<int>()); // descending using std::greater
    sort(nums.begin(), nums.end(), less<int>());    // ascending explicitly

    // ---------- Lambda comparator (pass by value) ----------
    vector<pair<char,int>> v1 = {{'a',2},{'b',5},{'c',3}};
    sort(v1.begin(), v1.end(), [](pair<char,int> a, pair<char,int> b) {
        return a.second > b.second;
    }); // copies each pair, fine for small types

    // ---------- Lambda comparator (pass by const reference) ----------
    vector<pair<char,int>> v2 = {{'a',2},{'b',5},{'c',3}};
    sort(v2.begin(), v2.end(), [](const pair<char,int> &a, const pair<char,int> &b) {
        return a.second > b.second;
    }); // avoids copying, better for large objects

    // ---------- Custom comparator function ----------
    vector<pair<char,int>> v3 = {{'a',2},{'b',5},{'c',3}};
    sort(v3.begin(), v3.end(), cmpFunction); // passes function pointer

    // ---------- Functor comparator ----------
    vector<pair<char,int>> v4 = {{'a',2},{'b',5},{'c',3}};
    sort(v4.begin(), v4.end(), CmpFunctor()); // passes functor object

    // ---------- Static comparator inside class ----------
    vector<Student> students = {
        {"Ram", 85},
        {"Sita", 92},
        {"Hari", 85}
    };
    sort(students.begin(), students.end(), Student::cmpByMarks);

    // Output
    cout << "\nSorted students by marks then name:\n";
    for (auto &st : students) {
        cout << st.name << " " << st.marks << "\n";
    }
}
